{"version":3,"sources":["/home/travis/build/braposo/figma-graphql/docs/road-to-v2.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_braposo_figma_graphql_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","isMDXComponent"],"mappings":"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","file":"static/js/road-to-v2.26d5f371.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"from-v1-to-v2\"\n    }}>{`From v1 to v2`}</h1>\n    <p>{`We're big fans of `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.figma.com\"\n      }}>{`Figma`}</a>{` since pretty much the beginning so when the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.figma.com/developers\"\n      }}>{`API`}</a>{` was announced we immediately jumped on board and created this GraphQL API. That was the first version of the figma-graphql library and it was mostly a 1-to-1 mapping of the existing API.`}</p>\n    <p>{`As we kept using figma-graphql to get the information from our design files it became evident that the structure of the Figma API response object was very limiting.`}</p>\n    <p>{`The tree-shaped structure that the REST API uses mimics the same structure of the design file, which makes sense on one hand but on the other hand makes it quite hard for humans to process all that information.`}</p>\n    <p>{`Besides that, we were completely dismissing the power that GraphQL offers on abstracting multiple requests into a simple query.`}</p>\n    <p>{`We knew it could be much easier for people to navigate through their design files so we completely rebuilt the library for v2.`}</p>\n    <h2 {...{\n      \"id\": \"shortcuts\"\n    }}>{`Shortcuts`}</h2>\n    <p>{`We opted to surface all the different types of elements that are descendants of a given node so it makes the queries much more natural and doesn't force people to know the structure of the design file.`}</p>\n    <p>{`Let's see a concrete example. This was how we could get the name of a text element in a document:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    file(id: \"cLp23bR627jcuNSoBGkhL04E\") {\n        pages {\n            frames {\n                elements(type: \"TEXT\") {\n                    name\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`We had to follow the structure of the file and know exactly where the element was to get the information we need. This also meant that only the text elements that were direct children of the frames that were at the top level of the page would be returned.`}</p>\n    <p>{`If the designers grouped the text elements together inside those same frames, we wouldn't be able to return those elements because they'd be a child of a different element now.`}</p>\n    <p>{`In v2 this is what we can do instead:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    file(id: \"cLp23bR627jcuNSoBGkhL04E\") {\n        pages {\n            frames {\n                texts {\n                    name\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Doesn't seem much of a difference but it fixes most of the issues we had with the previous query. It will return `}<strong parentName=\"p\">{`any`}</strong>{` text element that is a child of `}<strong parentName=\"p\">{`any`}</strong>{` frame that is part of `}<strong parentName=\"p\">{`any`}</strong>{` page in the file.`}</p>\n    <p>{`In this query `}<inlineCode parentName=\"p\">{`texts`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`frames`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`pages`}</inlineCode>{` are shortcuts and don't behave the same way as in v1. These shortcuts respect the query structure so they will only match the nodes that respect the same hierarchy in the document.`}</p>\n    <p>{`This also means that we could even simplify this query if we just want the name of all the text elements in a file, no matter where they are placed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    file(id: \"cLp23bR627jcuNSoBGkhL04E\") {\n        texts {\n            name\n        }\n    }\n}\n`}</code></pre>\n    <p>{`This gives a lot of flexibility and takes away the complexity of the structure of the file from the user by default.`}</p>\n    <p>{`And that was the main motivation to build the v2 of figma-graphql: to make a human-first API for Figma.`}</p>\n    <h2 {...{\n      \"id\": \"unified-query\"\n    }}>{`Unified query`}</h2>\n    <p>{`Another aspect that we briefly mentioned above is the fact that we weren't taking advantage of the power of abstraction in GraphQL. We had the `}<inlineCode parentName=\"p\">{`file`}</inlineCode>{` query but also mapped all the different API end points to separate queries like `}<inlineCode parentName=\"p\">{`images`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`comments`}</inlineCode>{`, etc.`}</p>\n    <p>{`This is still possible and we kept the support from v1, but it's no longer recommended.`}</p>\n    <p>{`Instead, we are now stitching together the different queries into a single query that can do all the actions supported by the multiple queries in v1 with the added bonus that it makes the queries much easier to understand.`}</p>\n    <p>{`Let's look at this query for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    projects(teamId: \"teamID\") {\n        name\n        files {\n            name\n            frames {\n                export\n            }\n            comments {\n                message\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`This is using just the team ID as a starting point to get through all the different projects inside a team, then get all the files for each project and then export all frames from each file in the default jpg format as well as getting all the comments associated with each file. `}</p>\n    <p>{`It might seem a simple query but it's in fact using four different endpoints and making several requests to get all that information. But it does that in a way that is completely hidden to the user, who doesn't have to deal witht the complexity of the system.`}</p>\n    <p>{`By making these properties available in their context we make the query much more natural and augment the capababilities of the existing REST API. `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}