{"version":3,"sources":["/home/travis/build/braposo/figma-graphql/docs/examples.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_braposo_figma_graphql_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"uWAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,sBADR,sBAGAL,OAAAE,EAAA,EAAAF,CAAA,oHACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,kBACEA,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,cAAd,4CAEFN,OAAAE,EAAA,EAAAF,CAAA,mGACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,8fAuBLP,OAAAE,EAAA,EAAAF,CAAA,kBACEA,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,cAAd,oGAEFN,OAAAE,EAAA,EAAAF,CAAA,sFACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,6PAiBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,kBACEA,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,cAAd,kFAEFN,OAAAE,EAAA,EAAAF,CAAA,4DACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,uSAiBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oBADR,oBAGAL,OAAAE,EAAA,EAAAF,CAAA,kBACEA,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,cAAd,8GAEFN,OAAAE,EAAA,EAAAF,CAAA,qGACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,6pBA0BTX,EAAWY,gBAAiB","file":"static/js/examples.94c663b2.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"practical-examples\"\n    }}>{`Practical examples`}</h1>\n    <p>{`Let's look at some practical examples in the perspective of designers, developers and product managers.`}</p>\n    <h2 {...{\n      \"id\": \"designers\"\n    }}>{`Designers`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Get all text styles in a specific frame`}</p>\n    </blockquote>\n    <p>{`This example tries to follow the structure of the file to get the information we need.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    file(id: \"fileID\") {\n        pages(name: \"styles\") {\n            frames(name: \"typography\") {\n                groups {\n                    name\n                    texts {\n                        name\n                        styles {\n                            fontSize\n                            fontFamily\n                            fontWeight\n                            ...\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Get the background colours of all the global styles to update their Design System documentation`}</p>\n    </blockquote>\n    <p>{`We can now use the power of the shortcuts to get that information easily.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    file(id: \"fileID\") {\n        styles(type: FILL) {\n            name\n            styles {\n                color {\n                    r\n                    g\n                    b\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"developers\"\n    }}>{`Developers`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Export all icons in a design document to generate up-to-date React components`}</p>\n    </blockquote>\n    <p>{`We want to export the components in SVG format.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    file(id: “fileID”) {\n        pages(name: \"Icons\") {\n            components {\n                name\n                size {\n                    width\n                    height\n                }\n                export(format: svg)\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"product-managers\"\n    }}>{`Product Managers`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Get the screenshots of the prototype screens for a few different features to present at a product meeting`}</p>\n    </blockquote>\n    <p>{`We need to go through all the files inside the team projects so we'll be using aliases. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n    projects(teamId: \"teamID\") {\n        featureA: files(name: \"Feature A\") {\n            pages(name: \"Prototype\") {\n                frames {\n                    name\n                    export(format: jpg)\n                }\n            }\n        },\n        featureB: files(name: \"Feature B\") {\n            pages(name: \"Prototype\") {\n                frames {\n                    name\n                    export(format: jpg)\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}